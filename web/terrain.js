// Generated by LiveScript 1.2.0
var ref$, Obj, sum, zipWith, fold, map, square, clamp, scale, length, normalize, dot, sub, rgba, colorShade, colorFloor, material, normalMap, blend2, blend, shadeMaterial, MATERIALS, materialMap, shaderMap, terrainMap;
ref$ = require('prelude-ls'), Obj = ref$.Obj, sum = ref$.sum, zipWith = ref$.zipWith, fold = ref$.fold, map = ref$.map;
square = function(x){
  return Math.pow(x, 2);
};
clamp = function(x, min, max){
  return Math.max(min, Math.min(max, x));
};
scale = curry$(function(s, v){
  return map((function(it){
    return it * s;
  }), v);
});
length = function(v){
  return Math.sqrt(sum(map(square, v)));
};
normalize = function(v){
  return scale(1 / length(v), v);
};
dot = curry$(function(v, w){
  return sum(zipWith(curry$(function(x$, y$){
    return x$ * y$;
  }), v, w));
});
sub = function(v, w){
  return zipWith(curry$(function(x$, y$){
    return x$ - y$;
  }), v, w);
};
rgba = function(r, g, b, a){
  r == null && (r = 0);
  g == null && (g = 0);
  b == null && (b = 0);
  a == null && (a = 0);
  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
};
colorShade = curry$(function(a, c){
  return rgba(c.r * a, c.g * a, c.b * a, c.a);
});
colorFloor = function(c){
  return rgba(Math.floor(c.r), Math.floor(c.g), Math.floor(c.b), c.a);
};
material = function(arg$){
  var ref$, diffuse, ref1$, specular, ambient, shininess;
  ref$ = arg$ != null
    ? arg$
    : {}, diffuse = (ref1$ = ref$.diffuse) != null
    ? ref1$
    : rgba(), specular = (ref1$ = ref$.specular) != null
    ? ref1$
    : rgba(), ambient = (ref1$ = ref$.ambient) != null
    ? ref1$
    : rgba(), shininess = (ref1$ = ref$.shininess) != null ? ref1$ : 4;
  return {
    diffuse: diffuse,
    specular: specular,
    ambient: ambient,
    shininess: shininess
  };
};
normalMap = function(heights){
  return function(x, y){
    var hr, hl, ha, hb;
    hr = heights(x + 1, y);
    hl = heights(x - 1, y);
    ha = heights(x, y + 1);
    hb = heights(x, y - 1);
    return normalize([hb - ha, hl - hr, 1]);
  };
};
blend2 = function(a, b){
  return rgba(a.r + b.r * b.a, a.g + b.g * b.a, a.b + b.b * b.a, a.a + b.a);
};
blend = function(colors){
  return fold(blend2, rgba(), colors);
};
shadeMaterial = function(material, normal, light, viewer){
  var ambient, nl, diffuse, r, spec, specular;
  ambient = material.ambient;
  nl = dot(normal, light);
  diffuse = nl > 0
    ? colorShade(nl, material.diffuse)
    : rgba();
  r = sub(scale(2 * nl, normal), light);
  spec = dot(r, viewer);
  specular = spec > 0
    ? colorShade(Math.pow(spec, material.shininess), material.specular)
    : rgba();
  return blend([ambient, diffuse, specular]);
};
MATERIALS = Obj.map(material, {
  water: {
    diffuse: rgba(16, 85, 196, 0.4),
    ambient: rgba(16, 85, 196, 0.45),
    specular: rgba(19, 99, 228, 0.15),
    shininess: 0.25
  },
  beach: {
    diffuse: rgba(204, 189, 24, 0.55),
    ambient: rgba(204, 189, 24, 0.45)
  },
  grass: {
    diffuse: rgba(14, 204, 20, 0.55),
    ambient: rgba(14, 204, 20, 0.45)
  },
  mountain: {
    diffuse: rgba(85, 73, 59, 0.5),
    ambient: rgba(85, 73, 59, 0.4),
    specular: rgba(85, 73, 59, 0.1),
    shininess: 0.5
  },
  peak: {
    diffuse: rgba(240, 240, 238, 0.55),
    ambient: rgba(240, 240, 238, 0.45)
  }
});
materialMap = function(heights, normals){
  return function(x, y){
    var height, normal;
    height = heights(x, y);
    normal = normals(x, y);
    switch (false) {
    case !(height < 32):
      return MATERIALS.water;
    case !(height < 48 && dot(normal, [0, 0, 1]) < 0.1):
      return MATERIALS.beach;
    case !(height < 128):
      return MATERIALS.grass;
    case !(height < 240):
      return MATERIALS.mountain;
    default:
      return MATERIALS.peak;
    }
  };
};
shaderMap = function(materials, normals, light, viewer){
  return function(x, y){
    var normal, material, color;
    normal = normals(x, y);
    material = materials(x, y);
    return color = colorFloor(
    shadeMaterial(material, normal, light, viewer));
  };
};
terrainMap = function(data){
  var light, viewer, heights, normals, materials, shader;
  light = normalize([-1, 1, 1]);
  viewer = [0, 0, 1];
  heights = function(x, y){
    var yy, xx;
    yy = Math.floor(clamp(y, 0, data.length - 1));
    xx = Math.floor(clamp(x, 0, data[yy].length - 1));
    return data[yy][xx];
  };
  normals = normalMap(heights);
  materials = materialMap(heights, normals);
  return shader = shaderMap(materials, normals, light, viewer);
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}